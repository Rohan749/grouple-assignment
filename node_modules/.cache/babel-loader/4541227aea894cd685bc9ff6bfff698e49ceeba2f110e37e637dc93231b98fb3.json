{"ast":null,"code":"import { DateTime } from \"luxon\";\nimport { useState } from \"react\";\nconst API_KEY = \"7810862358638f2199f060783ceacbf6\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nlet flag = true;\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst weatherFormat = (data, units) => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      pressure,\n      humidity\n    },\n    wind: {\n      speed\n    },\n    dt,\n    name,\n    cod,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    }\n  } = data;\n  let tempFormat;\n  if (units === \"metric\") tempFormat = temp + \"C\";\n  const {\n    main: details,\n    icon\n  } = data.weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    pressure,\n    humidity,\n    speed,\n    dt,\n    name,\n    cod,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon\n  };\n};\nconst forecastFormat = async data => {\n  let {\n    timezone,\n    list\n  } = data;\n  list = list.filter((obj, index) => {\n    const datePart = obj.dt_txt.split(\" \")[0];\n    return list.findIndex(o => o.dt_txt.split(\" \")[0] === datePart) === index;\n  }).slice(1, 4).map(d => {\n    return {\n      title: formatToLocalTime(d.dt, timezone, 'ccc'),\n      temp: d.main.temp,\n      icon: d.weather[0].icon,\n      min_temp: d.main.temp_min,\n      max_temp: d.main.temp_max\n    };\n  });\n  return {\n    timezone,\n    list\n  };\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedData = await getWeatherData(\"weather\", searchParams).then(data => weatherFormat(data, searchParams.units));\n  const {\n    lat,\n    lon\n  } = formattedData;\n  const formattedForcast = await getWeatherData(\"forecast\", {\n    lat,\n    lon,\n    exclude: \"current, minutely, alerts\",\n    units: searchParams.units\n  }).then(forecastFormat);\n  return {\n    ...formattedData,\n    ...formattedForcast\n  };\n};\nconst formatToLocalTime = (secs, zone, format = \"cccc, dd, LLL, yyyy' | Local time: 'hh:mm a\") => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\nconst urlIconCreator = code => `http://openweathermap.org/img/wn/${code}@2x.png`;\nexport default getFormattedWeatherData;\nexport { formatToLocalTime, urlIconCreator, flag };","map":{"version":3,"names":["DateTime","useState","API_KEY","BASE_URL","flag","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","weatherFormat","data","units","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","pressure","humidity","wind","speed","dt","name","cod","sys","country","sunrise","sunset","tempFormat","details","icon","weather","forecastFormat","timezone","list","filter","obj","index","datePart","dt_txt","split","findIndex","o","slice","map","d","title","formatToLocalTime","min_temp","max_temp","getFormattedWeatherData","formattedData","formattedForcast","exclude","secs","zone","format","fromSeconds","setZone","toFormat","urlIconCreator","code"],"sources":["/home/aaruni/Desktop/grouple-assignment/weather-assignment/src/services/services.js"],"sourcesContent":["import { DateTime } from \"luxon\";\nimport { useState } from \"react\";\n\nconst API_KEY = \"7810862358638f2199f060783ceacbf6\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nlet flag = true;\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  return fetch(url).then((res) => res.json());\n};\n\nconst weatherFormat = (data, units) => {\n\n\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, pressure, humidity },\n    wind: { speed },\n    dt,\n    name,\n    cod,\n    sys: { country, sunrise, sunset },\n  } = data;\n\n  let tempFormat;\n\n  if(units === \"metric\") tempFormat = temp + \"C\"\n\n  const { main: details, icon } = data.weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    pressure,\n    humidity,\n    speed,\n    dt,\n    name,\n    cod,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n  };\n};\n\nconst forecastFormat = async (data) => {\n  let { timezone, list } = data;\n\n  list = list.filter((obj, index) => {\n    const datePart = obj.dt_txt.split(\" \")[0];\n    return list.findIndex((o) => o.dt_txt.split(\" \")[0] === datePart) === index;\n  }).slice(1, 4).map(d => {\n        return {\n            title: formatToLocalTime(d.dt, timezone, 'ccc'),\n            temp: d.main.temp,\n            icon: d.weather[0].icon,\n            min_temp: d.main.temp_min,\n            max_temp: d.main.temp_max\n        }\n      });\n\n\n  return { timezone, list }\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n\n\n  const formattedData = await getWeatherData(\"weather\", searchParams).then(\n    (data) => weatherFormat(data, searchParams.units)\n  )\n\n  const { lat, lon } = formattedData;\n\n  const formattedForcast = await getWeatherData(\"forecast\", {\n    lat,\n    lon,\n    exclude: \"current, minutely, alerts\",\n    units: searchParams.units,\n  }).then(forecastFormat);\n\n  return {...formattedData, ...formattedForcast};\n};\n\nconst formatToLocalTime = (\n  secs,\n  zone,\n  format = \"cccc, dd, LLL, yyyy' | Local time: 'hh:mm a\"\n) => DateTime.fromSeconds(secs).setZone(zone).toFormat(format);\n\nconst urlIconCreator = (code) => `http://openweathermap.org/img/wn/${code}@2x.png`\n\nexport default getFormattedWeatherData;\n\nexport { formatToLocalTime, urlIconCreator, flag }\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}