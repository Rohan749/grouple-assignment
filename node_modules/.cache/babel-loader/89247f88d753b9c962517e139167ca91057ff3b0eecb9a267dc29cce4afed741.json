{"ast":null,"code":"var _jsxFileName = \"/home/aaruni/Desktop/grouple-assignment/weather-assignment/src/App.js\",\n  _s = $RefreshSig$();\nimport \"./App.css\";\nimport UilReact from \"@iconscout/react-unicons/icons/uil-react\";\nimport TopButtons from \"./components/TopButtons\";\nimport Inputs from \"./components/Inputs\";\nimport TimeLocation from \"./components/TimeLocation\";\nimport TempAndDetails from \"./components/TempAndDetails\";\nimport Forcast from \"./components/Forcast\";\nimport getFormattedWeatherData from \"./services/services\";\nimport { useEffect, useState } from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [query, setQuery] = useState({\n    q: \"berlin\"\n  });\n  const [units, setUnits] = useState(\"metric\");\n  const [weather, setWeather] = useState(null);\n  useEffect(() => {\n    const fetchedWeather = async () => {\n      const message = query.q ? query.q : 'Current location.';\n      toast.info('Fetching weather for ' + message);\n      await getFormattedWeatherData({\n        ...query,\n        units\n      }).then(data => {\n        setWeather(data);\n        console.log(\"Recieved Data: \");\n        toast.success(`Successfully fetched weather for ${data.name}, ${data.country}`);\n      });\n    };\n    fetchedWeather();\n  }, [query, units]);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"bg-gradient-to-r from-gray-600 to-gray-900\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"mx-auto max-w-screen-md  py-5 px-16 md:px-32 min-h-screen h-fit bg-gradient-to-r from-cyan-500 to-blue-500\",\n      children: [/*#__PURE__*/_jsxDEV(TopButtons, {\n        setQuery: setQuery\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 7\n      }, this), /*#__PURE__*/_jsxDEV(Inputs, {\n        setQuery: setQuery,\n        units: units,\n        setUnits: setUnits\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 44,\n        columnNumber: 7\n      }, this), weather && /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(TimeLocation, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(TempAndDetails, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(Forcast, {\n          weather: weather\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 5\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 39,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"gM9ltGbVXP1eDM0tSzoINkjwl+Q=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["UilReact","TopButtons","Inputs","TimeLocation","TempAndDetails","Forcast","getFormattedWeatherData","useEffect","useState","ToastContainer","toast","jsxDEV","_jsxDEV","App","_s","query","setQuery","q","units","setUnits","weather","setWeather","fetchedWeather","message","info","then","data","console","log","success","name","country","className","children","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/aaruni/Desktop/grouple-assignment/weather-assignment/src/App.js"],"sourcesContent":["import \"./App.css\";\nimport UilReact from \"@iconscout/react-unicons/icons/uil-react\";\nimport TopButtons from \"./components/TopButtons\";\nimport Inputs from \"./components/Inputs\";\nimport TimeLocation from \"./components/TimeLocation\";\nimport TempAndDetails from \"./components/TempAndDetails\";\nimport Forcast from \"./components/Forcast\";\nimport getFormattedWeatherData from \"./services/services\";\nimport { useEffect, useState } from \"react\";\nimport { ToastContainer, toast } from 'react-toastify';\nimport 'react-toastify/dist/ReactToastify.css';\n\n\nfunction App() {\n  const [query, setQuery] = useState({ q: \"berlin\" });\n  const [units, setUnits] = useState(\"metric\");\n  const [weather, setWeather] = useState(null);\n\n  useEffect(() => {\n    const fetchedWeather = async () => {\n\n      const message = query.q ? query.q : 'Current location.'\n\n      toast.info('Fetching weather for ' + message)\n\n      await getFormattedWeatherData({ ...query, units }).then((data) => {\n        setWeather(data);\n        console.log(\"Recieved Data: \",)\n        \n        toast.success(`Successfully fetched weather for ${data.name}, ${data.country}`)\n      });\n    };\n\n    fetchedWeather();\n  }, [query, units]);\n\n\n  return (\n    <div className=\"bg-gradient-to-r from-gray-600 to-gray-900\">\n    <div className=\"mx-auto max-w-screen-md \n      py-5 px-16 md:px-32 min-h-screen h-fit\n      bg-gradient-to-r from-cyan-500 to-blue-500\">\n      <TopButtons setQuery={setQuery}/>\n      <Inputs setQuery={setQuery} units={units} setUnits={setUnits}/>\n      {weather && (\n        <div>\n          <TimeLocation weather={weather} />\n          <TempAndDetails weather={weather} />\n          <Forcast weather={weather} />\n        </div>\n      )}\n\n      {/* <ToastContainer autoClose={3000} theme=\"dark\" hideProgressBar pauseOnHover/> */}\n    </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}