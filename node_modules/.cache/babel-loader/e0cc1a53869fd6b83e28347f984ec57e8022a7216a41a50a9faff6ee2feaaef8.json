{"ast":null,"code":"const API_KEY = \"7810862358638f2199f060783ceacbf6\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({\n    ...searchParams,\n    appid: API_KEY\n  });\n  return fetch(url).then(res => res.json());\n};\nconst weatherFormat = data => {\n  const {\n    coord: {\n      lat,\n      lon\n    },\n    main: {\n      temp,\n      feels_like,\n      temp_min,\n      temp_max,\n      pressure,\n      humidity\n    },\n    wind: {\n      speed\n    },\n    dt,\n    name,\n    cod,\n    sys: {\n      country,\n      sunrise,\n      sunset\n    }\n  } = data;\n  const {\n    main: details,\n    icon\n  } = data.weather[0];\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    pressure,\n    humidity,\n    speed,\n    dt,\n    name,\n    cod,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon\n  };\n};\nconst forecastFormat = async data => {\n  let {\n    timezone,\n    daily\n  } = data;\n  daily = daily.slice(1, 4).map();\n};\nconst getFormattedWeatherData = async searchParams => {\n  const formattedData = await getWeatherData(\"weather\", searchParams).then(weatherFormat);\n  const {\n    lat,\n    lon\n  } = formattedData;\n  const formattedForcastWeather = await getWeatherData(\"forecast\", {\n    lat,\n    lon,\n    exclude: \"current, minutely, alerts\",\n    units: searchParams.units\n  }).then(forecastFormat);\n  return formattedData;\n};\nconst formatToLocalTime = (secs, zone, format = \"cccc, dd, LLL, yyy' | Local time: 'hh:mm a\");\nexport default getFormattedWeatherData;","map":{"version":3,"names":["API_KEY","BASE_URL","getWeatherData","infoType","searchParams","url","URL","search","URLSearchParams","appid","fetch","then","res","json","weatherFormat","data","coord","lat","lon","main","temp","feels_like","temp_min","temp_max","pressure","humidity","wind","speed","dt","name","cod","sys","country","sunrise","sunset","details","icon","weather","forecastFormat","timezone","daily","slice","map","getFormattedWeatherData","formattedData","formattedForcastWeather","exclude","units","formatToLocalTime","secs","zone","format"],"sources":["/home/aaruni/Desktop/grouple-assignment/weather-assignment/src/services/services.js"],"sourcesContent":["const API_KEY = \"7810862358638f2199f060783ceacbf6\";\nconst BASE_URL = \"https://api.openweathermap.org/data/2.5\";\n\nconst getWeatherData = (infoType, searchParams) => {\n  const url = new URL(BASE_URL + \"/\" + infoType);\n  url.search = new URLSearchParams({ ...searchParams, appid: API_KEY });\n\n  return fetch(url).then((res) => res.json());\n};\n\nconst weatherFormat = (data) => {\n  const {\n    coord: { lat, lon },\n    main: { temp, feels_like, temp_min, temp_max, pressure, humidity },\n    wind: { speed },\n    dt,\n    name,\n    cod,\n    sys: { country, sunrise, sunset },\n  } = data;\n\n  const { main: details, icon } = data.weather[0];\n\n  return {\n    lat,\n    lon,\n    temp,\n    feels_like,\n    temp_min,\n    temp_max,\n    pressure,\n    humidity,\n    speed,\n    dt,\n    name,\n    cod,\n    country,\n    sunrise,\n    sunset,\n    details,\n    icon,\n  };\n};\n\nconst forecastFormat = async (data) => {\n  let { timezone, daily } = data;\n\n  daily = daily.slice(1, 4).map();\n};\n\nconst getFormattedWeatherData = async (searchParams) => {\n  const formattedData = await getWeatherData(\"weather\", searchParams).then(\n    weatherFormat\n  );\n\n  const { lat, lon } = formattedData;\n\n  const formattedForcastWeather = await getWeatherData(\"forecast\", {\n    lat,\n    lon,\n    exclude: \"current, minutely, alerts\",\n    units: searchParams.units,\n  }).then(forecastFormat);\n\n  return formattedData;\n};\n\nconst formatToLocalTime =\n  (secs, zone, (format = \"cccc, dd, LLL, yyy' | Local time: 'hh:mm a\"));\n\nexport default getFormattedWeatherData;\n"],"mappings":"AAAA,MAAMA,OAAO,GAAG,kCAAkC;AAClD,MAAMC,QAAQ,GAAG,yCAAyC;AAE1D,MAAMC,cAAc,GAAGA,CAACC,QAAQ,EAAEC,YAAY,KAAK;EACjD,MAAMC,GAAG,GAAG,IAAIC,GAAG,CAACL,QAAQ,GAAG,GAAG,GAAGE,QAAQ,CAAC;EAC9CE,GAAG,CAACE,MAAM,GAAG,IAAIC,eAAe,CAAC;IAAE,GAAGJ,YAAY;IAAEK,KAAK,EAAET;EAAQ,CAAC,CAAC;EAErE,OAAOU,KAAK,CAACL,GAAG,CAAC,CAACM,IAAI,CAAEC,GAAG,IAAKA,GAAG,CAACC,IAAI,CAAC,CAAC,CAAC;AAC7C,CAAC;AAED,MAAMC,aAAa,GAAIC,IAAI,IAAK;EAC9B,MAAM;IACJC,KAAK,EAAE;MAAEC,GAAG;MAAEC;IAAI,CAAC;IACnBC,IAAI,EAAE;MAAEC,IAAI;MAAEC,UAAU;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC,QAAQ;MAAEC;IAAS,CAAC;IAClEC,IAAI,EAAE;MAAEC;IAAM,CAAC;IACfC,EAAE;IACFC,IAAI;IACJC,GAAG;IACHC,GAAG,EAAE;MAAEC,OAAO;MAAEC,OAAO;MAAEC;IAAO;EAClC,CAAC,GAAGnB,IAAI;EAER,MAAM;IAAEI,IAAI,EAAEgB,OAAO;IAAEC;EAAK,CAAC,GAAGrB,IAAI,CAACsB,OAAO,CAAC,CAAC,CAAC;EAE/C,OAAO;IACLpB,GAAG;IACHC,GAAG;IACHE,IAAI;IACJC,UAAU;IACVC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRC,QAAQ;IACRE,KAAK;IACLC,EAAE;IACFC,IAAI;IACJC,GAAG;IACHE,OAAO;IACPC,OAAO;IACPC,MAAM;IACNC,OAAO;IACPC;EACF,CAAC;AACH,CAAC;AAED,MAAME,cAAc,GAAG,MAAOvB,IAAI,IAAK;EACrC,IAAI;IAAEwB,QAAQ;IAAEC;EAAM,CAAC,GAAGzB,IAAI;EAE9ByB,KAAK,GAAGA,KAAK,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAACC,GAAG,CAAC,CAAC;AACjC,CAAC;AAED,MAAMC,uBAAuB,GAAG,MAAOvC,YAAY,IAAK;EACtD,MAAMwC,aAAa,GAAG,MAAM1C,cAAc,CAAC,SAAS,EAAEE,YAAY,CAAC,CAACO,IAAI,CACtEG,aACF,CAAC;EAED,MAAM;IAAEG,GAAG;IAAEC;EAAI,CAAC,GAAG0B,aAAa;EAElC,MAAMC,uBAAuB,GAAG,MAAM3C,cAAc,CAAC,UAAU,EAAE;IAC/De,GAAG;IACHC,GAAG;IACH4B,OAAO,EAAE,2BAA2B;IACpCC,KAAK,EAAE3C,YAAY,CAAC2C;EACtB,CAAC,CAAC,CAACpC,IAAI,CAAC2B,cAAc,CAAC;EAEvB,OAAOM,aAAa;AACtB,CAAC;AAED,MAAMI,iBAAiB,IACpBC,IAAI,EAAEC,IAAI,EAAGC,MAAM,GAAG,4CAA6C,CAAC;AAEvE,eAAeR,uBAAuB"},"metadata":{},"sourceType":"module","externalDependencies":[]}